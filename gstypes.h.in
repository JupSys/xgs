/* config.h.in.  This file is autogenerated from config.h.in by cmake */

#ifndef __CONFIG_H__
#define __CONFIG_H__

/* Define if your platform stores words in big-endian order */
#cmakedefine WORDS_BIGENDIAN @WORDS_BIGENDIAN@

#include <cstdint>

/**
 * Union definition of a 16-bit value that can also be
 * accessed as its component 8-bit values. Useful for
 * registers, which change sized based on the settings
 * the M and X program status register bits.
 */

union multibyte16_t {
#ifdef WORDS_BIGENDIAN
    struct { std::uint8_t H,L; } B;
#else
    struct { std::uint8_t L,H; } B;
#endif
    std::uint16_t W;

    operator std::uint8_t&  () { return B.L; }
    operator std::uint16_t& () { return W; }
};

// http://stackoverflow.com/questions/105252/how-do-i-convert-between-big-endian-and-little-endian-values-in-c

template <typename T> T swap_endian(T u)
{
    union {
        T u;
        unsigned char u8[sizeof(T)];
    } source, dest;

    source.u = u;

    for (std::size_t k = 0; k < sizeof(T); k++) 
        dest.u8[k] = source.u8[sizeof(T) - k - 1];
    
    return dest.u;
}

// Typedef for holding VBL counts
typedef std::uint32_t vbls_t;

// Typedef for holding CPU cycle counts
typedef std::uint64_t cycles_t;

#endif /* __CONFIG_H__ */
